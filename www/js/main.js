// Generated by CoffeeScript 1.6.3
(function() {
  var AppView, Circle, Circles, Grito, Mou, Music, Particle, ParticlesCanvas, PlayAgain, Viz, view, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Music = (function(_super) {
    __extends(Music, _super);

    function Music() {
      this.update = __bind(this.update, this);
      this.play = __bind(this.play, this);
      this.finishedLoading = __bind(this.finishedLoading, this);
      this.initialize = __bind(this.initialize, this);
      _ref = Music.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Music.prototype.context = null;

    Music.prototype.bufferLoader = null;

    Music.prototype.analyser = null;

    Music.prototype.url = '/static/sound/track.mp3';

    Music.prototype.source = null;

    Music.prototype.initialize = function() {
      this.context = new AudioContext();
      this.analyser = this.context.createAnalyser();
      this.analyser.fftSize = 1024;
      this.bufferLoader = new BufferLoader(this.context, [this.url], this.finishedLoading);
      return this.bufferLoader.load();
    };

    Music.prototype.finishedLoading = function(bufferList) {
      this.source = this.context.createBufferSource();
      this.source.buffer = bufferList[0];
      this.source.connect(this.analyser);
      this.analyser.connect(this.context.destination);
      this.trigger('loaded');
      return null;
    };

    Music.prototype.play = function() {
      return this.source.start(0);
    };

    Music.prototype.update = function() {
      var freqByteData;
      if (!this.analyser || !this.analyser.context) {
        return;
      }
      freqByteData = new Uint8Array(this.analyser.frequencyBinCount);
      this.analyser.getByteFrequencyData(freqByteData);
      return {
        time: this.context.currentTime,
        freq: freqByteData
      };
    };

    return Music;

  })(Backbone.View);

  Mou = (function(_super) {
    __extends(Mou, _super);

    function Mou() {
      this.shakeMou = __bind(this.shakeMou, this);
      this.stopMou = __bind(this.stopMou, this);
      this.scaleMo = __bind(this.scaleMo, this);
      this.update = __bind(this.update, this);
      this.initialize = __bind(this.initialize, this);
      this.getXXYY = __bind(this.getXXYY, this);
      _ref1 = Mou.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Mou.prototype.mou = null;

    Mou.prototype.hat = null;

    Mou.prototype.g = null;

    Mou.prototype.xx = 0;

    Mou.prototype.yy = 0;

    Mou.prototype.getXXYY = function() {
      this.xx = $(window).innerWidth();
      this.yy = $(window).innerHeight();
      return null;
    };

    Mou.prototype.initialize = function() {
      var _this = this;
      this.getXXYY();
      this.g = Snap();
      return Snap.load("static/images/mou.svg", function(f) {
        var x, y;
        _this.mou = f.select("#mou").attr({
          fill: "#000"
        });
        _this.g.add(_this.mou);
        x = _this.xx / 2 - _this.mou.getBBox().width / 2;
        y = _this.yy / 2 - _this.mou.getBBox().height / 2;
        return _this.mou.attr({
          transform: "t" + [x, y]
        });
      });
    };

    Mou.prototype.update = function(music) {
      switch (true) {
        case music.time >= 2 && music.time < 6.5:
          return this.shakeMou();
        case music.time >= 7.8 && music.time < 13.5:
          return this.shakeMou();
        default:
          return this.stopMou();
      }
    };

    Mou.prototype.scaleMo = function() {
      var to, x, y,
        _this = this;
      if (this.mou.inAnim().length > 0) {
        return;
      }
      this.mou.stop();
      x = (this.xx - this.mou.getBBox().width) / 2;
      y = (this.yy - this.mou.getBBox().height) / 2;
      to = "s" + [100, 100];
      setTimeout(function() {
        return $('body').css('background-color', '#000');
      }, 400);
      return this.mou.animate({
        transform: to
      }, 700);
    };

    Mou.prototype.stopMou = function() {
      var to, x, y;
      this.mou.stop();
      x = (this.xx - this.mou.getBBox().width) / 2;
      y = (this.yy - this.mou.getBBox().height) / 2;
      to = "r" + [0, x + this.mou.getBBox().width, y] + ", t" + [x, y];
      return this.mou.animate({
        transform: to
      }, 75);
    };

    Mou.prototype.shakeMou = function() {
      var to, x, y,
        _this = this;
      x = (this.xx - this.mou.getBBox().width) / 2;
      y = (this.yy - this.mou.getBBox().height) / 2;
      if (this.mou.inAnim().length > 0) {
        return;
      }
      to = "r" + [10, x + this.mou.getBBox().width, y] + ", t" + [x, y];
      this.mou.animate({
        transform: to
      }, 75, null, function() {
        to = "r" + [-10, x, y] + ", t" + [x, y];
        return _this.mou.animate({
          transform: to
        }, 100, null);
      });
    };

    return Mou;

  })(Backbone.View);

  Circles = (function(_super) {
    __extends(Circles, _super);

    function Circles() {
      this.animateOut = __bind(this.animateOut, this);
      this.animateIn = __bind(this.animateIn, this);
      this.initialize = __bind(this.initialize, this);
      _ref2 = Circles.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Circles.prototype.className = 'circles';

    Circles.prototype.circles = null;

    Circles.prototype.animatedIn = false;

    Circles.prototype.animatedOut = false;

    Circles.prototype.initialize = function() {
      var circle, colours, i, _i, _ref3, _results;
      colours = ['#27E7FF', '#33B32A', '#FF1100', '#FCFFFF', '#27E7FF', '#000'];
      this.circles = [];
      _results = [];
      for (i = _i = 0, _ref3 = colours.length; _i < _ref3; i = _i += 1) {
        circle = new Circle(colours[i]);
        this.circles.push(circle);
        _results.push(this.$el.append(circle.$el));
      }
      return _results;
    };

    Circles.prototype.animateIn = function() {
      var i, _i, _ref3;
      this.$el.css('display', 'block');
      this.animatedIn = true;
      for (i = _i = 0, _ref3 = this.circles.length; 0 <= _ref3 ? _i < _ref3 : _i > _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
        this.circles[i].animateIn(500 + (i * 350));
      }
      return null;
    };

    Circles.prototype.animateOut = function() {
      var i, _i, _ref3;
      this.$el.css('z-index', '999');
      this.animatedOut = true;
      this.circles = this.circles.reverse();
      for (i = _i = 0, _ref3 = this.circles.length; 0 <= _ref3 ? _i < _ref3 : _i > _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
        this.circles[i].animateOut(500 + (i * 350));
      }
      return null;
    };

    return Circles;

  })(Backbone.View);

  Viz = (function(_super) {
    __extends(Viz, _super);

    function Viz() {
      this.onResize = __bind(this.onResize, this);
      this.onToggleShaders = __bind(this.onToggleShaders, this);
      this.startParams = __bind(this.startParams, this);
      this.onParamsChange = __bind(this.onParamsChange, this);
      this.setupGrito = __bind(this.setupGrito, this);
      this.setupViz = __bind(this.setupViz, this);
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
      this.updateLightDrama = __bind(this.updateLightDrama, this);
      this.changeScale = __bind(this.changeScale, this);
      this.changeCamera = __bind(this.changeCamera, this);
      this.pad = __bind(this.pad, this);
      this.getGif = __bind(this.getGif, this);
      this.initialize = __bind(this.initialize, this);
      _ref3 = Viz.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Viz.prototype.className = 'canvasContainer';

    Viz.prototype.scene = null;

    Viz.prototype.camera = null;

    Viz.prototype.particles = 1000;

    Viz.prototype.mouseX = 0;

    Viz.prototype.mouseY = 0;

    Viz.prototype.p = null;

    Viz.prototype.shaderTime = 0;

    Viz.prototype.object = null;

    Viz.prototype.secs = null;

    Viz.prototype.drums = null;

    Viz.prototype.drama = null;

    Viz.prototype.picked = null;

    Viz.prototype.pickedDrums = null;

    Viz.prototype.pickedDrama = null;

    Viz.prototype.colours = null;

    Viz.prototype.composer = null;

    Viz.prototype.shaderTime = 0;

    Viz.prototype.badTVParams = null;

    Viz.prototype.badTVPass = null;

    Viz.prototype.staticParams = null;

    Viz.prototype.staticPass = null;

    Viz.prototype.rgbParams = null;

    Viz.prototype.rgbPass = null;

    Viz.prototype.filmParams = null;

    Viz.prototype.filmPass = null;

    Viz.prototype.renderPass = null;

    Viz.prototype.copyPass = null;

    Viz.prototype.pnoise = null;

    Viz.prototype.globalParams = null;

    Viz.prototype.videoTexture = null;

    Viz.prototype.videoMaterial = null;

    Viz.prototype.isGrito = false;

    Viz.prototype.initialize = function() {
      var a, geometry, i, material, mesh, planeGeometry, _i, _j, _k, _l, _ref4, _ref5, _ref6;
      this.picked = this.pickedDrama = this.pickedDrums = [];
      this.drums = [12.998, 13.537, 14.479, 14.990, 15.984, 16.560, 17.591, 18.106, 19.060, 19.655, 20.682, 21.208, 22.209, 22.799, 23.846, 24.392, 25.355, 25.920, 26.807, 27.383, 28.360, 28.941, 30.025, 30.550, 31.595, 32.131, 33.118, 33.608, 34.606, 35.182, 36.234, 36.735, 37.750, 38.375, 39.294, 39.873, 40.799, 41.366, 42.366, 42.887, 43.968, 44.540, 45.578, 46.123, 52.068, 52.906, 53.960, 54.506, 55.567];
      this.secs = [13.008, 15.812, 18.780, 21.977, 24.875, 28.319, 31.437, 34.430, 37.717, 40.506, 43.453, 46.436];
      this.drama = [37.869, 38.203, 38.593, 38.960, 39.318, 39.740, 40.114, 40.876, 41.270, 41.663, 42.083, 42.471, 42.854, 43.235, 43.983, 44.394, 44.802, 45.176, 45.575, 45.966, 46.390];
      for (i = _i = 0, _ref4 = this.secs.length; _i < _ref4; i = _i += 1) {
        this.secs[i] = this.secs[i].toFixed(1);
      }
      for (i = _j = 0, _ref5 = this.drums.length; _j < _ref5; i = _j += 1) {
        this.drums[i] = this.drums[i].toFixed(1);
      }
      for (i = _k = 0, _ref6 = this.drama.length; _k < _ref6; i = _k += 1) {
        this.drama[i] = this.drama[i].toFixed(1);
      }
      this.colours = [0x27E7FF, 0x33B32A, 0xFF1100, 0xFCFFFF, 0x27E7FF];
      /*
      RENDER
      */

      this.renderer = new THREE.WebGLRenderer;
      this.renderer.setClearColor(0x000000, 1);
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.el.appendChild(this.renderer.domElement);
      this.composer = new THREE.EffectComposer(this.renderer);
      this.copyPass = new THREE.ShaderPass(THREE.CopyShader);
      /*
      SCENE
      */

      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 2000);
      this.scene = new THREE.Scene();
      this.object = new THREE.Object3D();
      this.object.name = 'cubes';
      geometry = new THREE.SphereGeometry(1, 4, 4);
      for (i = _l = 0; _l < 300; i = ++_l) {
        material = new THREE.MeshPhongMaterial({
          map: THREE.ImageUtils.loadTexture(this.getGif()),
          shading: THREE.FlatShading
        });
        mesh = new THREE.Mesh(geometry, material);
        mesh.position.set(Math.random() - 0.7, Math.random() - 0.5, Math.random() - 0.1).normalize();
        mesh.position.multiplyScalar(Math.random() * 800);
        mesh.rotation.set(Math.random() * 2, Math.random() * 2, Math.random() * 2);
        a = Math.random() * 50;
        mesh.scale.x = mesh.scale.y = mesh.scale.z = a;
        mesh.originalScale = a;
        this.object.add(mesh);
      }
      this.scene.add(new THREE.AmbientLight(0x444445));
      /*
      GRITO
      */

      this.videoMaterial = new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture('static/images/grito.jpg')
      });
      planeGeometry = new THREE.PlaneGeometry(window.innerWidth, window.innerHeight, 1, 1);
      this.plane = new THREE.Mesh(planeGeometry, this.videoMaterial);
      this.plane.name = 'plane';
      this.plane.z = 0;
      this.plane.scale.x = this.plane.scale.y = 1.45;
      /*
      */

      this.renderPass = new THREE.RenderPass(this.scene, this.camera);
      this.badTVPass = new THREE.ShaderPass(THREE.BadTVShader);
      this.rgbPass = new THREE.ShaderPass(THREE.RGBShiftShader);
      this.filmPass = new THREE.ShaderPass(THREE.FilmShader);
      this.staticPass = new THREE.ShaderPass(THREE.StaticShader);
      this.setupViz();
      this.onResize();
      window.addEventListener('resize', this.onResize, false);
      return null;
    };

    Viz.prototype.getGif = function() {
      return 'static/images/gifs/gif_' + this.pad(Math.round(Math.random() * 49)) + ".gif";
    };

    Viz.prototype.pad = function(n, pad) {
      var s;
      if (pad == null) {
        pad = 3;
      }
      s = "000000000" + n;
      return s.substr(s.length - pad);
    };

    Viz.prototype.changeCamera = function(secs) {
      secs = secs.toFixed(1);
      if (_.where(this.secs, secs).length > 0 && _.where(this.picked, secs).length === 0) {
        this.picked.push(secs);
        this.mouseX = (window.innerWidth / 2 - (Math.random() * window.innerWidth / 2)) / 1.5;
        this.mouseY = (window.innerHeight / 2 - (Math.random() * window.innerHeight / 2)) / 1.5;
      }
      return null;
    };

    Viz.prototype.changeScale = function(secs) {
      var d, i, s, _i, _j, _len, _len1, _ref4, _ref5;
      d = .25;
      secs = secs.toFixed(1);
      if (_.where(this.drums, secs).length > 0 && _.where(this.pickedDrums, secs).length === 0) {
        this.pickedDrums.push(secs);
        _ref4 = this.object.children;
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          i = _ref4[_i];
          i.target = i.originalScale + 15;
          i.animating = true;
        }
      }
      _ref5 = this.object.children;
      for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
        i = _ref5[_j];
        if (!i.animating) {
          s = i.scale.x;
          s += (i.originalScale - s) * d;
          i.scale.x = i.scale.y = i.scale.z = s;
        } else {
          if (Math.floor(i.scale.x) < Math.floor(i.target)) {
            s = i.scale.x;
            s += (i.target - i.scale.x) * d;
            i.scale.x = i.scale.y = i.scale.z = s;
          } else {
            i.animating = false;
          }
        }
      }
      return null;
    };

    Viz.prototype.updateLightDrama = function(secs) {
      var r;
      secs = secs.toFixed(1);
      if (_.where(this.drama, secs).length > 0 && _.where(this.pickedDrama, secs).length === 0) {
        this.pickedDrama.push(secs);
        r = Math.floor(Math.random() * (this.colours.length - 1));
        return this.light2.color.setHex(this.colours[r]);
      }
    };

    Viz.prototype.update = function(a) {
      this.changeCamera(a.time);
      this.changeScale(a.time);
      if (a.time > 37.5 && a.time < 47) {
        if (!this.light2) {
          this.light2 = new THREE.AmbientLight(0xFF0000);
          this.light2.position.set(1, 1, 1);
          this.scene.add(this.light2);
        }
        this.updateLightDrama(a.time);
      } else {
        if (this.light2) {
          this.scene.remove(this.light2);
          this.light2 = null;
        }
      }
      this.render();
      return null;
    };

    Viz.prototype.render = function() {
      if (this.isGrito) {
        this.camera.position.x = 0;
        this.camera.position.y = 0;
        this.shaderTime += 0.1;
        this.badTVPass.uniforms['time'].value = this.shaderTime;
        this.filmPass.uniforms['time'].value = this.shaderTime;
        this.staticPass.uniforms['time'].value = this.shaderTime;
        this.composer.render(0.1);
      } else {
        this.camera.position.x += (this.mouseX - this.camera.position.x) * 0.05;
        this.camera.position.y += (-this.mouseY - this.camera.position.y) * 0.05;
        this.renderer.render(this.scene, this.camera);
      }
      return null;
    };

    Viz.prototype.setupViz = function() {
      this.scene.fog = new THREE.FogExp2(0x000000, 0.0005);
      this.camera.fov = 75;
      this.camera.far = 2000;
      this.camera.near = 1;
      this.camera.position.z = 700;
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.scene.remove(this.plane);
      this.scene.remove(this.object);
      this.scene.add(this.object);
      this.startParams(false);
      this.onToggleShaders();
      this.onParamsChange();
      return null;
    };

    Viz.prototype.setupGrito = function() {
      this.scene.fog = null;
      this.camera.fov = 55;
      this.camera.far = 3000;
      this.camera.near = 20;
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.position.x = 0;
      this.camera.position.y = 0;
      this.camera.position.z = 1000;
      this.scene.remove(this.plane);
      this.scene.remove(this.object);
      this.scene.add(this.plane);
      this.startParams(true);
      this.onToggleShaders();
      this.onParamsChange();
      return null;
    };

    Viz.prototype.onParamsChange = function() {
      this.badTVPass.uniforms["distortion"].value = this.badTVParams.distortion;
      this.badTVPass.uniforms["distortion2"].value = this.badTVParams.distortion2;
      this.badTVPass.uniforms["speed"].value = this.badTVParams.speed;
      this.badTVPass.uniforms["rollSpeed"].value = this.badTVParams.rollSpeed;
      this.staticPass.uniforms["amount"].value = this.staticParams.amount;
      this.staticPass.uniforms["size"].value = this.staticParams.size2;
      this.rgbPass.uniforms["angle"].value = this.rgbParams.angle * Math.PI;
      this.rgbPass.uniforms["amount"].value = this.rgbParams.amount;
      this.filmPass.uniforms["sCount"].value = this.filmParams.count;
      this.filmPass.uniforms["sIntensity"].value = this.filmParams.sIntensity;
      this.filmPass.uniforms["nIntensity"].value = this.filmParams.nIntensity;
      return null;
    };

    Viz.prototype.startParams = function(val) {
      if (val == null) {
        val = true;
      }
      if (val) {
        this.filmPass.uniforms["grayscale"].value = 0;
        this.badTVParams = {
          "show": true,
          "distortion": 3.060059035103768,
          "distortion2": 8.147361182980239,
          "speed": 0.06159879360347986,
          "rollSpeed": 0
        };
        this.rgbParams = {
          "show": true,
          "amount": 0.014869250056799501,
          "angle": 1.114169194828719
        };
        this.staticParams = {
          "show": true,
          "amount": 0.006870601838454605,
          "size2": 4
        };
        this.filmParams = {
          "show": true,
          "count": 800,
          "sIntensity": 0.9,
          "nIntensity": 0.4
        };
      } else {
        this.filmPass.uniforms["grayscale"].value = 0;
        this.badTVParams = {
          "show": true,
          "distortion": 0.060059035103768,
          "distortion2": 1.147361182980239,
          "speed": 0.00159879360347986,
          "rollSpeed": 0
        };
        this.rgbParams = {
          "show": true,
          "amount": 0.000000250056799501,
          "angle": 0.000069194828719
        };
        this.staticParams = {
          "show": true,
          "amount": 0.006870601838454605,
          "size2": 4
        };
        this.filmParams = {
          "show": true,
          "count": 800,
          "sIntensity": 0.2,
          "nIntensity": 0.1
        };
      }
      return null;
    };

    Viz.prototype.onToggleShaders = function(val) {
      if (val == null) {
        val = true;
      }
      this.composer = new THREE.EffectComposer(this.renderer);
      this.composer.addPass(this.renderPass);
      if (val) {
        if (this.filmParams.show) {
          this.composer.addPass(this.filmPass);
        }
        if (this.badTVParams.show) {
          this.composer.addPass(this.badTVPass);
        }
        if (this.rgbParams.show) {
          this.composer.addPass(this.rgbPass);
        }
        if (this.staticParams.show) {
          this.composer.addPass(this.staticPass);
        }
      }
      this.composer.addPass(this.copyPass);
      this.copyPass.renderToScreen = true;
      return null;
    };

    Viz.prototype.onResize = function() {
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.updateProjectionMatrix();
      return null;
    };

    return Viz;

  })(Backbone.View);

  Circle = (function(_super) {
    __extends(Circle, _super);

    Circle.prototype.className = 'circle';

    function Circle(colour) {
      this.colour = colour != null ? colour : 'black';
      this.animateOut = __bind(this.animateOut, this);
      this.animateIn = __bind(this.animateIn, this);
      this.reset = __bind(this.reset, this);
      Circle.__super__.constructor.call(this);
      this.reset();
      null;
    }

    Circle.prototype.reset = function() {
      var s;
      this.$el.removeClass();
      s = Math.max($(window).innerWidth(), $(window).innerHeight()) * 1.5;
      return this.$el.css({
        width: s,
        height: s,
        backgroundColor: this.colour,
        left: ($(window).innerWidth() - s) / 2,
        top: ($(window).innerHeight() - s) / 2
      });
    };

    Circle.prototype.animateIn = function(delay) {
      var _this = this;
      this.reset();
      this.$el.addClass('circle0');
      return setTimeout(function() {
        _this.$el.addClass('animateCircle');
        return _this.$el.css({
          transform: 'scale(1)'
        });
      }, delay);
    };

    Circle.prototype.animateOut = function(delay) {
      var _this = this;
      this.reset();
      this.$el.addClass('circle1');
      return setTimeout(function() {
        _this.$el.addClass('animateCircle');
        return _this.$el.css({
          transform: 'scale(0)'
        });
      }, delay);
    };

    return Circle;

  })(Backbone.View);

  Particle = (function() {
    Particle.prototype.x = 0;

    Particle.prototype.y = 0;

    Particle.prototype.r = 0;

    Particle.prototype.dx = 0;

    Particle.prototype.dy = 0;

    Particle.prototype.canvas = null;

    Particle.prototype.w = 0;

    Particle.prototype.h = 0;

    function Particle(args) {
      this.move = __bind(this.move, this);
      this.rand = __bind(this.rand, this);
      this.draw = __bind(this.draw, this);
      this.dx = args._dx;
      this.dy = args._dy;
      this.x = args._x;
      this.y = args._y;
      this.r = args._r;
      this.canvas = args._canvas;
      this.w = args._w;
      this.h = args._h;
    }

    Particle.prototype.draw = function() {
      this.canvas.beginPath();
      this.canvas.fillStyle = '#FFF';
      this.canvas.arc(this.x, this.y, this.r, 0, Math.PI * 2, true);
      this.canvas.closePath();
      return this.canvas.fill();
    };

    Particle.prototype.rand = function(low, high) {
      if (low == null) {
        low = 0;
      }
      if (high == null) {
        high = 1;
      }
      return ((Math.random() * (high - low)) + low) % high;
    };

    Particle.prototype.move = function() {
      this.x += this.dx;
      this.y += this.dy;
      if (!(this.x < this.w && this.x > -10)) {
        this.x = -5;
        this.dx = this.rand(-0.8, .8);
      }
      if (this.y > this.h) {
        this.y = 0;
        return this.dy = this.rand(0.1, .5);
      }
    };

    return Particle;

  })();

  ParticlesCanvas = (function(_super) {
    __extends(ParticlesCanvas, _super);

    function ParticlesCanvas() {
      this.clear = __bind(this.clear, this);
      this.update = __bind(this.update, this);
      this.batchParticles = __bind(this.batchParticles, this);
      this.start = __bind(this.start, this);
      this.initialize = __bind(this.initialize, this);
      _ref4 = ParticlesCanvas.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    ParticlesCanvas.prototype.ctx = null;

    ParticlesCanvas.prototype.canvas = null;

    ParticlesCanvas.prototype.particles = null;

    ParticlesCanvas.prototype.tagName = 'div';

    ParticlesCanvas.prototype.className = 'particles';

    ParticlesCanvas.prototype.initialize = function() {
      this.canvas = document.createElement('canvas');
      this.$el.append(this.canvas);
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
      this.ctx = this.canvas.getContext('2d');
      return this.start();
    };

    ParticlesCanvas.prototype.start = function() {
      this.particles = [];
      return this.batchParticles();
      /*for i in [0...3]
          setTimeout @batchParticles, 10000 * i
      */

    };

    ParticlesCanvas.prototype.batchParticles = function() {
      var i, p, _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 1000; i = ++_i) {
        p = new Particle({
          _x: this.rand(0, this.canvas.width),
          _y: this.rand(0, -250),
          _r: this.rand(0.2, 2),
          _canvas: this.ctx,
          _w: this.canvas.width,
          _h: this.canvas.height,
          _dx: this.rand(-.3, .3),
          _dy: this.rand(0.1, .5)
        });
        _results.push(this.particles.push(p));
      }
      return _results;
    };

    ParticlesCanvas.prototype.rand = function(low, high) {
      if (low == null) {
        low = 0;
      }
      if (high == null) {
        high = 1;
      }
      return ((Math.random() * (high - low)) + low) % high;
    };

    ParticlesCanvas.prototype.update = function() {
      var p, _i, _len, _ref5, _results;
      this.clear();
      _ref5 = this.particles;
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        p = _ref5[_i];
        p.move();
        _results.push(p.draw());
      }
      return _results;
    };

    ParticlesCanvas.prototype.clear = function() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return null;
    };

    return ParticlesCanvas;

  })(Backbone.View);

  PlayAgain = (function(_super) {
    __extends(PlayAgain, _super);

    function PlayAgain() {
      this.update = __bind(this.update, this);
      this.refresh = __bind(this.refresh, this);
      this.initialize = __bind(this.initialize, this);
      _ref5 = PlayAgain.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    PlayAgain.prototype.particles = null;

    PlayAgain.prototype.tagName = 'section';

    PlayAgain.prototype.initialize = function() {
      var tags;
      tags = '<div class="container">';
      tags += '<div class="content">';
      tags += '<h1>Merry Christmas</h1>';
      tags += '<button onclick="window.location.reload();">Watch Again?</button>';
      tags += '<h3>by <a href="http://twitter.com/silviopaganini" target="_blank">@silviopaganini</a></h3>';
      tags += '</div>';
      tags += '</div>';
      this.$el.html(tags);
      this.$el.attr('id', 'bye');
      this.particles = new ParticlesCanvas;
      return this.$el.prepend(this.particles.$el);
    };

    PlayAgain.prototype.refresh = function() {};

    PlayAgain.prototype.update = function() {
      this.particles.update();
      return null;
    };

    return PlayAgain;

  })(Backbone.View);

  Grito = (function(_super) {
    __extends(Grito, _super);

    function Grito() {
      this.animate = __bind(this.animate, this);
      this.onResize = __bind(this.onResize, this);
      this.onToggleShaders = __bind(this.onToggleShaders, this);
      this.randomizeParams = __bind(this.randomizeParams, this);
      this.startParams = __bind(this.startParams, this);
      this.onParamsChange = __bind(this.onParamsChange, this);
      this.initialize = __bind(this.initialize, this);
      _ref6 = Grito.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Grito.prototype.camera = null;

    Grito.prototype.scene = null;

    Grito.prototype.renderer = null;

    Grito.prototype.videoTexture = null;

    Grito.prototype.videoMaterial = null;

    Grito.prototype.composer = null;

    Grito.prototype.shaderTime = 0;

    Grito.prototype.badTVParams = null;

    Grito.prototype.badTVPass = null;

    Grito.prototype.staticParams = null;

    Grito.prototype.staticPass = null;

    Grito.prototype.rgbParams = null;

    Grito.prototype.rgbPass = null;

    Grito.prototype.filmParams = null;

    Grito.prototype.filmPass = null;

    Grito.prototype.renderPass = null;

    Grito.prototype.copyPass = null;

    Grito.prototype.pnoise = null;

    Grito.prototype.globalParams = null;

    Grito.prototype.initialize = function() {
      var plane, planeGeometry;
      this.$el.attr('id', 'grito');
      this.camera = new THREE.PerspectiveCamera(55, 1080 / 720, 20, 3000);
      this.camera.position.z = 1000;
      this.scene = new THREE.Scene();
      this.videoMaterial = new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture('/static/images/grito.jpg')
      });
      planeGeometry = new THREE.PlaneGeometry(1080, 720, 1, 1);
      plane = new THREE.Mesh(planeGeometry, this.videoMaterial);
      this.scene.add(plane);
      plane.z = 0;
      plane.scale.x = plane.scale.y = 1.45;
      this.renderer = new THREE.WebGLRenderer;
      this.renderer.setSize($(window).innerWidth(), $(window).innerHeight());
      this.$el.append(this.renderer.domElement);
      this.renderPass = new THREE.RenderPass(this.scene, this.camera);
      this.badTVPass = new THREE.ShaderPass(THREE.BadTVShader);
      this.rgbPass = new THREE.ShaderPass(THREE.RGBShiftShader);
      this.filmPass = new THREE.ShaderPass(THREE.FilmShader);
      this.staticPass = new THREE.ShaderPass(THREE.StaticShader);
      this.copyPass = new THREE.ShaderPass(THREE.CopyShader);
      this.startParams();
      this.onToggleShaders();
      this.onParamsChange();
      this.onResize();
      window.addEventListener('resize', this.onResize, false);
      this.animate();
      return null;
    };

    Grito.prototype.onParamsChange = function() {
      this.badTVPass.uniforms["distortion"].value = this.badTVParams.distortion;
      this.badTVPass.uniforms["distortion2"].value = this.badTVParams.distortion2;
      this.badTVPass.uniforms["speed"].value = this.badTVParams.speed;
      this.badTVPass.uniforms["rollSpeed"].value = this.badTVParams.rollSpeed;
      this.staticPass.uniforms["amount"].value = this.staticParams.amount;
      this.staticPass.uniforms["size"].value = this.staticParams.size2;
      this.rgbPass.uniforms["angle"].value = this.rgbParams.angle * Math.PI;
      this.rgbPass.uniforms["amount"].value = this.rgbParams.amount;
      this.filmPass.uniforms["sCount"].value = this.filmParams.count;
      this.filmPass.uniforms["sIntensity"].value = this.filmParams.sIntensity;
      this.filmPass.uniforms["nIntensity"].value = this.filmParams.nIntensity;
      return null;
    };

    Grito.prototype.startParams = function() {
      /* @badTVParams.distortion = Math.random()*10+0.1
      @badTVParams.distortion2 =Math.random()*10+0.1
      @badTVParams.speed =Math.random()*.4
      @badTVParams.rollSpeed =Math.random()*.2
      @badTVParams.rollSpeed = 0
      @rgbParams.angle = Math.random()*2
      @rgbParams.amount = Math.random()*0.03
      @staticParams.amount = Math.random()*0.2
      */

      this.filmPass.uniforms["grayscale"].value = 0;
      this.badTVParams = {
        "mute": false,
        "show": true,
        "distortion": 3.060059035103768,
        "distortion2": 8.147361182980239,
        "speed": 0.06159879360347986,
        "rollSpeed": 0
      };
      this.rgbParams = {
        "show": true,
        "amount": 0.014869250056799501,
        "angle": 1.114169194828719
      };
      this.staticParams = {
        "show": true,
        "amount": 0.006870601838454605,
        "size2": 4
      };
      this.filmParams = {
        "show": true,
        "count": 800,
        "sIntensity": 0.9,
        "nIntensity": 0.4
      };
      return null;
    };

    Grito.prototype.randomizeParams = function() {
      var a;
      this.badTVParams = {
        "mute": false,
        "show": true,
        "distortion": 3.060059035103768,
        "distortion2": 8.147361182980239,
        "speed": 0.06159879360347986,
        "rollSpeed": 0
      };
      this.rgbParams = {
        "show": true,
        "amount": 0.014869250056799501,
        "angle": 1.114169194828719
      };
      this.staticParams = {
        "show": true,
        "amount": 0.006870601838454605,
        "size2": 4
      };
      this.filmParams = {
        "show": true,
        "count": 800,
        "sIntensity": 0.9,
        "nIntensity": 0.4
      };
      this.onParamsChange();
      return;
      this.badTVParams.distortion = Math.random() * 10 + 0.1;
      this.badTVParams.distortion2 = Math.random() * 10 + 0.1;
      this.badTVParams.speed = Math.random() * .4;
      this.badTVParams.rollSpeed = 0;
      this.rgbParams.angle = Math.random() * 2;
      this.rgbParams.amount = Math.random() * 0.03;
      this.staticParams.amount = Math.random() * 0.2;
      a = {
        "@badTVParams": this.badTVParams,
        "@rgbParams": this.rgbParams,
        "@staticParams": this.staticParams,
        "@filmParams": this.filmParams
      };
      console.log(JSON.stringify(a));
      this.onParamsChange();
      return null;
    };

    Grito.prototype.onToggleShaders = function() {
      this.composer = new THREE.EffectComposer(this.renderer);
      this.composer.addPass(this.renderPass);
      if (this.filmParams.show) {
        this.composer.addPass(this.filmPass);
      }
      if (this.badTVParams.show) {
        this.composer.addPass(this.badTVPass);
      }
      if (this.rgbParams.show) {
        this.composer.addPass(this.rgbPass);
      }
      if (this.staticParams.show) {
        this.composer.addPass(this.staticPass);
      }
      this.composer.addPass(this.copyPass);
      this.copyPass.renderToScreen = true;
      return null;
    };

    Grito.prototype.onResize = function() {
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.updateProjectionMatrix();
      return null;
    };

    Grito.prototype.animate = function() {
      this.shaderTime += 0.1;
      this.badTVPass.uniforms['time'].value = this.shaderTime;
      this.filmPass.uniforms['time'].value = this.shaderTime;
      this.staticPass.uniforms['time'].value = this.shaderTime;
      this.composer.render(0.1);
      requestAnimationFrame(this.animate);
      return null;
    };

    return Grito;

  })(Backbone.View);

  AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      this.animate = __bind(this.animate, this);
      this.onAudioLoaded = __bind(this.onAudioLoaded, this);
      this.initialize = __bind(this.initialize, this);
      _ref7 = AppView.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    AppView.prototype.music = null;

    AppView.prototype.mou = null;

    AppView.prototype.grito = null;

    AppView.prototype.circles = null;

    AppView.prototype.bye = null;

    AppView.prototype.initialize = function() {
      this.setElement($('body'));
      window.addStats();
      this.bye = new PlayAgain;
      this.music = new Music;
      this.music.on('loaded', this.onAudioLoaded);
      this.mou = new Mou;
      this.circles = new Circles;
      this.$el.append(this.circles.$el);
      this.viz = new Viz;
      this.$el.append(this.viz.$el);
      return null;
    };

    AppView.prototype.onAudioLoaded = function() {
      this.music.play();
      this.animate();
      return null;
    };

    AppView.prototype.animate = function() {
      var u, _ref8;
      u = this.music.update();
      if ((_ref8 = this.mou) != null) {
        _ref8.update(u);
      }
      if (u.time > 11.5 && !this.circles.animatedIn) {
        this.circles.animateIn();
      }
      if (u.time > 13.6 && u.time < 62) {
        this.viz.$el.css('display', 'block');
        this.viz.update(u);
      }
      if (u.time >= 47 && u.time <= 52) {
        if (!this.viz.isGrito) {
          this.viz.setupGrito();
        }
        this.viz.isGrito = true;
      }
      if (u.time >= 52) {
        if (this.viz.isGrito) {
          this.viz.setupViz();
        }
        this.viz.isGrito = false;
      }
      if (u.time > 57) {
        if (!this.circles.animatedOut) {
          this.circles.animateOut();
          $('svg').remove();
          this.$el.append(this.bye.$el);
          this.viz.$el.remove();
        } else {
          this.bye.update();
        }
      }
      window.stats.update();
      requestAnimationFrame(this.animate);
      return null;
    };

    return AppView;

  })(Backbone.View);

  view = window || document;

  view.xmas = {} || view.xmas;

  view.xmas.appView = new AppView;

}).call(this);
